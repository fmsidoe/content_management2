--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Backend that chains multiple other backends and checks each of them when a translation needs to be looked up. This is useful when you want to use standard translations with a Simple backend but store custom application translations in a database or other backends.
- !ruby/struct:SM::Flow::P 
  body: "To use the Chain backend instantiate it and set it to the I18n module. You can add chained backends through the initializer or backends accessor:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # preserves the existing Simple backend set to I18n.backend\n  I18n.backend = I18n::Backend::Chain.new(I18n::Backend::ActiveRecord.new, I18n.backend)\n"
- !ruby/struct:SM::Flow::P 
  body: The implementation assumes that all backends added to the Chain implement a lookup method with the same API as Simple backend does.
constants: []

full_name: I18n::Backend::Chain
includes: 
- !ruby/object:RI::IncludedModule 
  name: Implementation
instance_methods: []

name: Chain
superclass: Object
