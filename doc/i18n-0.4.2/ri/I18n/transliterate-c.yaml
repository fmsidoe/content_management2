--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Transliterates UTF-8 characters to ASCII. By default this method will transliterate only Latin strings to an ASCII approximation:"
- !ruby/struct:SM::Flow::VERB 
  body: "   I18n.transliterate(&quot;\xC3\x86r\xC3\xB8sk\xC3\xB8bing&quot;)\n   # =&gt; &quot;AEroskobing&quot;\n\n   I18n.transliterate(&quot;\xE6\x97\xA5\xE6\x9C\xAC\xE8\xAA\x9E&quot;)\n   # =&gt; &quot;???&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: It's also possible to add support for per-locale transliterations. I18n expects transliteration rules to be stored at <tt>i18n.transliterate.rule</tt>.
- !ruby/struct:SM::Flow::P 
  body: Transliteration rules can either be a Hash or a Proc. Procs must accept a single string argument. Hash rules inherit the default transliteration rules, while Procs do not.
- !ruby/struct:SM::Flow::P 
  body: <b>Examples</b>
- !ruby/struct:SM::Flow::P 
  body: "Setting a Hash in &lt;locale&gt;.yml:"
- !ruby/struct:SM::Flow::VERB 
  body: "   i18n:\n     transliterate:\n       rule:\n         \xC3\xBC: &quot;ue&quot;\n         \xC3\xB6: &quot;oe&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "Setting a Hash using Ruby:"
- !ruby/struct:SM::Flow::VERB 
  body: "    store_translations(:de, :i18n =&gt; {\n      :transliterate =&gt; {\n        :rule =&gt; {\n          &quot;\xC3\xBC&quot; =&gt; &quot;ue&quot;,\n          &quot;\xC3\xB6&quot; =&gt; &quot;oe&quot;\n        }\n      }\n    )\n"
- !ruby/struct:SM::Flow::P 
  body: "Setting a Proc:"
- !ruby/struct:SM::Flow::VERB 
  body: "    translit = lambda {|string| MyTransliterator.transliterate(string) }\n    store_translations(:xx, :i18n =&gt; {:transliterate =&gt; {:rule =&gt; translit})\n"
- !ruby/struct:SM::Flow::P 
  body: "Transliterating strings:"
- !ruby/struct:SM::Flow::VERB 
  body: "    I18n.locale = :en\n    I18n.transliterate(&quot;J\xC3\xBCrgen&quot;) # =&gt; &quot;Jurgen&quot;\n    I18n.locale = :de\n    I18n.transliterate(&quot;J\xC3\xBCrgen&quot;) # =&gt; &quot;Juergen&quot;\n    I18n.transliterate(&quot;J\xC3\xBCrgen&quot;, :locale =&gt; :en) # =&gt; &quot;Jurgen&quot;\n    I18n.transliterate(&quot;J\xC3\xBCrgen&quot;, :locale =&gt; :de) # =&gt; &quot;Juergen&quot;\n"
full_name: I18n::transliterate
is_singleton: true
name: transliterate
params: (*args)
visibility: public
