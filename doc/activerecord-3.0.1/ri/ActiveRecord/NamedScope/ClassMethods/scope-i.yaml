--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Adds a class method for retrieving and querying objects. A \scope represents a narrowing of a database query, such as <tt>where(:color =&gt; :red).select('shirts.*').includes(:washing_instructions)</tt>.
- !ruby/struct:SM::Flow::VERB 
  body: "  class Shirt &lt; ActiveRecord::Base\n    scope :red, where(:color =&gt; 'red')\n    scope :dry_clean_only, joins(:washing_instructions).where('washing_instructions.dry_clean_only = ?', true)\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: The above calls to <tt>scope</tt> define class methods Shirt.red and Shirt.dry_clean_only. Shirt.red, in effect, represents the query <tt>Shirt.where(:color =&gt; 'red')</tt>.
- !ruby/struct:SM::Flow::P 
  body: Unlike <tt>Shirt.find(...)</tt>, however, the object returned by Shirt.red is not an Array; it resembles the association object constructed by a <tt>has_many</tt> declaration. For instance, you can invoke <tt>Shirt.red.first</tt>, <tt>Shirt.red.count</tt>, <tt>Shirt.red.where(:size =&gt; 'small')</tt>. Also, just as with the association objects, named \scopes act like an Array, implementing Enumerable; <tt>Shirt.red.each(&amp;block)</tt>, <tt>Shirt.red.first</tt>, and <tt>Shirt.red.inject(memo, &amp;block)</tt> all behave as if Shirt.red really was an Array.
- !ruby/struct:SM::Flow::P 
  body: "These named \\scopes are composable. For instance, <tt>Shirt.red.dry_clean_only</tt> will produce all shirts that are both red and dry clean only. Nested finds and calculations also work with these compositions: <tt>Shirt.red.dry_clean_only.count</tt> returns the number of garments for which these criteria obtain. Similarly with <tt>Shirt.red.dry_clean_only.average(:thread_count)</tt>."
- !ruby/struct:SM::Flow::P 
  body: All \scopes are available as class methods on the ActiveRecord::Base descendant upon which the \scopes were defined. But they are also available to <tt>has_many</tt> associations. If,
- !ruby/struct:SM::Flow::VERB 
  body: "  class Person &lt; ActiveRecord::Base\n    has_many :shirts\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: then <tt>elton.shirts.red.dry_clean_only</tt> will return all of Elton's red, dry clean only shirts.
- !ruby/struct:SM::Flow::P 
  body: "Named \\scopes can also be procedural:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Shirt &lt; ActiveRecord::Base\n    scope :colored, lambda {|color| where(:color =&gt; color) }\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: In this example, <tt>Shirt.colored('puce')</tt> finds all puce shirts.
- !ruby/struct:SM::Flow::P 
  body: "Named \\scopes can also have extensions, just as with <tt>has_many</tt> declarations:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Shirt &lt; ActiveRecord::Base\n    scope :red, where(:color =&gt; 'red') do\n      def dom_id\n        'red_shirts'\n      end\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: Scopes can also be used while creating/building a record.
- !ruby/struct:SM::Flow::VERB 
  body: "  class Article &lt; ActiveRecord::Base\n    scope :published, where(:published =&gt; true)\n  end\n\n  Article.published.new.published    # =&gt; true\n  Article.published.create.published # =&gt; true\n"
full_name: ActiveRecord::NamedScope::ClassMethods#scope
is_singleton: false
name: scope
params: (name, scope_options = {}, &block)
visibility: public
