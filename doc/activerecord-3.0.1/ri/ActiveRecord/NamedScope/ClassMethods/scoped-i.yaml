--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns an anonymous \scope.
- !ruby/struct:SM::Flow::VERB 
  body: "  posts = Post.scoped\n  posts.size # Fires &quot;select count(*) from  posts&quot; and returns the count\n  posts.each {|p| puts p.name } # Fires &quot;select * from posts&quot; and loads post objects\n\n  fruits = Fruit.scoped\n  fruits = fruits.where(:colour =&gt; 'red') if options[:red_only]\n  fruits = fruits.limit(10) if limited?\n"
- !ruby/struct:SM::Flow::P 
  body: Anonymous \scopes tend to be useful when procedurally generating complex queries, where passing intermediate values (\scopes) around as first-class objects is convenient.
- !ruby/struct:SM::Flow::P 
  body: You can define a \scope that applies to all finders using ActiveRecord::Base.default_scope.
full_name: ActiveRecord::NamedScope::ClassMethods#scoped
is_singleton: false
name: scoped
params: (options = nil)
visibility: public
