--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Active Record Autosave Association
- !ruby/struct:SM::Flow::P 
  body: <tt>AutosaveAssociation</tt> is a module that takes care of automatically saving associacted records when their parent is saved. In addition to saving, it also destroys any associated records that were marked for destruction. (See <tt>mark_for_destruction</tt> and <tt>marked_for_destruction?</tt>).
- !ruby/struct:SM::Flow::P 
  body: Saving of the parent, its associations, and the destruction of marked associations, all happen inside a transaction. This should never leave the database in an inconsistent state.
- !ruby/struct:SM::Flow::P 
  body: If validations for any of the associations fail, their error messages will be applied to the parent.
- !ruby/struct:SM::Flow::P 
  body: Note that it also means that associations marked for destruction won't be destroyed directly. They will however still be marked for destruction.
- !ruby/struct:SM::Flow::P 
  body: Note that <tt>:autosave =&gt; false</tt> is not same as not declaring <tt>:autosave</tt>. When the <tt>:autosave</tt> option is not present new associations are saved.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: One-to-one Example
- !ruby/struct:SM::Flow::VERB 
  body: "  class Post\n    has_one :author, :autosave =&gt; true\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "Saving changes to the parent and its associated model can now be performed automatically <em>and</em> atomically:"
- !ruby/struct:SM::Flow::VERB 
  body: "  post = Post.find(1)\n  post.title       # =&gt; &quot;The current global position of migrating ducks&quot;\n  post.author.name # =&gt; &quot;alloy&quot;\n\n  post.title = &quot;On the migration of ducks&quot;\n  post.author.name = &quot;Eloy Duran&quot;\n\n  post.save\n  post.reload\n  post.title       # =&gt; &quot;On the migration of ducks&quot;\n  post.author.name # =&gt; &quot;Eloy Duran&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "Destroying an associated model, as part of the parent's save action, is as simple as marking it for destruction:"
- !ruby/struct:SM::Flow::VERB 
  body: "  post.author.mark_for_destruction\n  post.author.marked_for_destruction? # =&gt; true\n"
- !ruby/struct:SM::Flow::P 
  body: "Note that the model is <em>not</em> yet removed from the database:"
- !ruby/struct:SM::Flow::VERB 
  body: "  id = post.author.id\n  Author.find_by_id(id).nil? # =&gt; false\n\n  post.save\n  post.reload.author # =&gt; nil\n"
- !ruby/struct:SM::Flow::P 
  body: "Now it <em>is</em> removed from the database:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Author.find_by_id(id).nil? # =&gt; true\n"
- !ruby/struct:SM::Flow::H 
  level: 3
  text: One-to-many Example
- !ruby/struct:SM::Flow::P 
  body: "When <tt>:autosave</tt> is not declared new children are saved when their parent is saved:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Post\n    has_many :comments # :autosave option is no declared\n  end\n\n  post = Post.new(:title =&gt; 'ruby rocks')\n  post.comments.build(:body =&gt; 'hello world')\n  post.save # =&gt; saves both post and comment\n\n  post = Post.create(:title =&gt; 'ruby rocks')\n  post.comments.build(:body =&gt; 'hello world')\n  post.save # =&gt; saves both post and comment\n\n  post = Post.create(:title =&gt; 'ruby rocks')\n  post.comments.create(:body =&gt; 'hello world')\n  post.save # =&gt; saves both post and comment\n"
- !ruby/struct:SM::Flow::P 
  body: "When <tt>:autosave</tt> is true all children is saved, no matter whether they are new records:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Post\n    has_many :comments, :autosave =&gt; true\n  end\n\n  post = Post.create(:title =&gt; 'ruby rocks')\n  post.comments.create(:body =&gt; 'hello world')\n  post.comments[0].body = 'hi everyone'\n  post.save # =&gt; saves both post and comment, with 'hi everyone' as title\n"
- !ruby/struct:SM::Flow::P 
  body: "Destroying one of the associated models as part of the parent's save action is as simple as marking it for destruction:"
- !ruby/struct:SM::Flow::VERB 
  body: "  post.comments.last.mark_for_destruction\n  post.comments.last.marked_for_destruction? # =&gt; true\n  post.comments.length # =&gt; 2\n"
- !ruby/struct:SM::Flow::P 
  body: "Note that the model is <em>not</em> yet removed from the database:"
- !ruby/struct:SM::Flow::VERB 
  body: "  id = post.comments.last.id\n  Comment.find_by_id(id).nil? # =&gt; false\n\n  post.save\n  post.reload.comments.length # =&gt; 1\n"
- !ruby/struct:SM::Flow::P 
  body: "Now it <em>is</em> removed from the database:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Comment.find_by_id(id).nil? # =&gt; true\n"
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Validation
- !ruby/struct:SM::Flow::P 
  body: Children records are validated unless <tt>:validate</tt> is <tt>false</tt>.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: ASSOCIATION_TYPES
  value: "%w{ has_one belongs_to has_many has_and_belongs_to_many }"
full_name: ActiveRecord::AutosaveAssociation
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: changed_for_autosave?
- !ruby/object:RI::MethodSummary 
  name: mark_for_destruction
- !ruby/object:RI::MethodSummary 
  name: marked_for_destruction?
- !ruby/object:RI::MethodSummary 
  name: reload
name: AutosaveAssociation
superclass: 
