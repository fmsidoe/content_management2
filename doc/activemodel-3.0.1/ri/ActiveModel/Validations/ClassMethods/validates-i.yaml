--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: This method is a shortcut to all default validators and any custom validator classes ending in 'Validator'. Note that Rails default validators can be overridden inside specific classes by creating custom validator classes in their place such as PresenceValidator.
- !ruby/struct:SM::Flow::P 
  body: "Examples of using the default rails validators:"
- !ruby/struct:SM::Flow::VERB 
  body: "  validates :terms, :acceptance =&gt; true\n  validates :password, :confirmation =&gt; true\n  validates :username, :exclusion =&gt; { :in =&gt; %w(admin superuser) }\n  validates :email, :format =&gt; { :with =&gt; /\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\Z/i, :on =&gt; :create }\n  validates :age, :inclusion =&gt; { :in =&gt; 0..9 }\n  validates :first_name, :length =&gt; { :maximum =&gt; 30 }\n  validates :age, :numericality =&gt; true\n  validates :username, :presence =&gt; true\n  validates :username, :uniqueness =&gt; true\n"
- !ruby/struct:SM::Flow::P 
  body: The power of the <tt>validates</tt> method comes when using custom validators and default validators in one call for a given attribute e.g.
- !ruby/struct:SM::Flow::VERB 
  body: "  class EmailValidator &lt; ActiveModel::EachValidator\n    def validate_each(record, attribute, value)\n      record.errors[attribute] &lt;&lt; (options[:message] || &quot;is not an email&quot;) unless\n        value =~ /\\A([^@\\s]+)@((?:[-a-z0-9]+\\.)+[a-z]{2,})\\z/i\n    end\n  end\n\n  class Person\n    include ActiveModel::Validations\n    attr_accessor :name, :email\n\n    validates :name, :presence =&gt; true, :uniqueness =&gt; true, :length =&gt; { :maximum =&gt; 100 }\n    validates :email, :presence =&gt; true, :email =&gt; true\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: Validator classes may also exist within the class being validated allowing custom modules of validators to be included as needed e.g.
- !ruby/struct:SM::Flow::VERB 
  body: "  class Film\n    include ActiveModel::Validations\n\n    class TitleValidator &lt; ActiveModel::EachValidator\n      def validate_each(record, attribute, value)\n        record.errors[attribute] &lt;&lt; &quot;must start with 'the'&quot; unless value =~ /\\Athe/i\n      end\n    end\n\n    validates :name, :title =&gt; true\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "The validators hash can also handle regular expressions, ranges and arrays:"
- !ruby/struct:SM::Flow::VERB 
  body: "  validates :email, :format =&gt; /@/\n  validates :gender, :inclusion =&gt; %w(male female)\n  validates :password, :length =&gt; 6..20\n"
- !ruby/struct:SM::Flow::P 
  body: "Finally, the options :if, :unless, :on, :allow_blank and :allow_nil can be given to one specific validator:"
- !ruby/struct:SM::Flow::VERB 
  body: "  validates :password, :presence =&gt; { :if =&gt; :password_required? }, :confirmation =&gt; true\n"
- !ruby/struct:SM::Flow::P 
  body: "Or to all at the same time:"
- !ruby/struct:SM::Flow::VERB 
  body: "  validates :password, :presence =&gt; true, :confirmation =&gt; true, :if =&gt; :password_required?\n"
full_name: ActiveModel::Validations::ClassMethods#validates
is_singleton: false
name: validates
params: (*attributes)
visibility: public
