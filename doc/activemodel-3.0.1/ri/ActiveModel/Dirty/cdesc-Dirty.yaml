--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Active Model Dirty
- !ruby/struct:SM::Flow::P 
  body: Provides a way to track changes in your object in the same way as Active Record does.
- !ruby/struct:SM::Flow::P 
  body: "The requirements to implement ActiveModel::Dirty are to:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>include ActiveModel::Dirty</tt> in your object
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Call <tt>define_attribute_methods</tt> passing each method you want to track
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Call <tt>attr_name_will_change!</tt> before each change to the tracked attribute
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: If you wish to also track previous changes on save or update, you need to add
- !ruby/struct:SM::Flow::VERB 
  body: "  @previously_changed = changes\n"
- !ruby/struct:SM::Flow::P 
  body: inside of your save or update method.
- !ruby/struct:SM::Flow::P 
  body: "A minimal implementation could be:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class Person\n\n    include ActiveModel::Dirty\n\n    define_attribute_methods [:name]\n\n    def name\n      @name\n    end\n\n    def name=(val)\n      name_will_change! unless val == @name\n      @name = val\n    end\n\n    def save\n      @previously_changed = changes\n      @changed_attributes.clear\n    end\n\n  end\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: "Examples:"
- !ruby/struct:SM::Flow::P 
  body: "A newly instantiated object is unchanged:"
- !ruby/struct:SM::Flow::VERB 
  body: "  person = Person.find_by_name('Uncle Bob')\n  person.changed?       # =&gt; false\n"
- !ruby/struct:SM::Flow::P 
  body: "Change the name:"
- !ruby/struct:SM::Flow::VERB 
  body: "  person.name = 'Bob'\n  person.changed?       # =&gt; true\n  person.name_changed?  # =&gt; true\n  person.name_was       # =&gt; 'Uncle Bob'\n  person.name_change    # =&gt; ['Uncle Bob', 'Bob']\n  person.name = 'Bill'\n  person.name_change    # =&gt; ['Uncle Bob', 'Bill']\n"
- !ruby/struct:SM::Flow::P 
  body: "Save the changes:"
- !ruby/struct:SM::Flow::VERB 
  body: "  person.save\n  person.changed?       # =&gt; false\n  person.name_changed?  # =&gt; false\n"
- !ruby/struct:SM::Flow::P 
  body: "Assigning the same value leaves the attribute unchanged:"
- !ruby/struct:SM::Flow::VERB 
  body: "  person.name = 'Bill'\n  person.name_changed?  # =&gt; false\n  person.name_change    # =&gt; nil\n"
- !ruby/struct:SM::Flow::P 
  body: Which attributes have changed?
- !ruby/struct:SM::Flow::VERB 
  body: "  person.name = 'Bob'\n  person.changed        # =&gt; ['name']\n  person.changes        # =&gt; { 'name' =&gt; ['Bill', 'Bob'] }\n"
- !ruby/struct:SM::Flow::P 
  body: If an attribute is modified in-place then make use of <tt>[attribute_name]_will_change!</tt> to mark that the attribute is changing. Otherwise ActiveModel can't track changes to in-place attributes.
- !ruby/struct:SM::Flow::VERB 
  body: "  person.name_will_change!\n  person.name &lt;&lt; 'y'\n  person.name_change    # =&gt; ['Bill', 'Billy']\n"
constants: []

full_name: ActiveModel::Dirty
includes: 
- !ruby/object:RI::IncludedModule 
  name: ActiveModel::AttributeMethods
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: changed
- !ruby/object:RI::MethodSummary 
  name: changed?
- !ruby/object:RI::MethodSummary 
  name: changed_attributes
- !ruby/object:RI::MethodSummary 
  name: changes
- !ruby/object:RI::MethodSummary 
  name: previous_changes
name: Dirty
superclass: 
