--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
- !ruby/object:RI::MethodSummary 
  name: observe
- !ruby/object:RI::MethodSummary 
  name: observed_class
- !ruby/object:RI::MethodSummary 
  name: observed_classes
comment: 
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Active Model Observers
- !ruby/struct:SM::Flow::P 
  body: "Observer classes respond to life cycle callbacks to implement trigger-like behavior outside the original class. This is a great way to reduce the clutter that normally comes when the model class is burdened with functionality that doesn't pertain to the core responsibility of the class. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class CommentObserver &lt; ActiveModel::Observer\n    def after_save(comment)\n      Notifications.deliver_comment(&quot;admin@do.com&quot;, &quot;New comment was posted&quot;, comment)\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: This Observer sends an email when a Comment#save is finished.
- !ruby/struct:SM::Flow::VERB 
  body: "  class ContactObserver &lt; ActiveModel::Observer\n    def after_create(contact)\n      contact.logger.info('New contact added!')\n    end\n\n    def after_destroy(contact)\n      contact.logger.warn(&quot;Contact with an id of #{contact.id} was destroyed!&quot;)\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: This Observer uses logger to log when specific callbacks are triggered.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Observing a class that can't be inferred
- !ruby/struct:SM::Flow::P 
  body: "Observers will by default be mapped to the class with which they share a name. So CommentObserver will be tied to observing Comment, ProductManagerObserver to ProductManager, and so on. If you want to name your observer differently than the class you're interested in observing, you can use the Observer.observe class method which takes either the concrete class (Product) or a symbol for that class (:product):"
- !ruby/struct:SM::Flow::VERB 
  body: "  class AuditObserver &lt; ActiveModel::Observer\n    observe :account\n\n    def after_update(account)\n      AuditTrail.new(account, &quot;UPDATED&quot;)\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: "If the audit observer needs to watch more than one kind of object, this can be specified with multiple arguments:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class AuditObserver &lt; ActiveModel::Observer\n    observe :account, :balance\n\n    def after_update(record)\n      AuditTrail.new(record, &quot;UPDATED&quot;)\n    end\n  end\n"
- !ruby/struct:SM::Flow::P 
  body: The AuditObserver will now act on both updates to Account and Balance by treating them both as records.
constants: []

full_name: ActiveModel::Observer
includes: 
- !ruby/object:RI::IncludedModule 
  name: Singleton
instance_methods: []

name: Observer
superclass: Object
