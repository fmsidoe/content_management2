--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: blank
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Sets the HTTP response's content MIME type. For example, in the controller you could write this:"
  - !ruby/struct:SM::Flow::VERB 
    body: " response.content_type = &quot;text/plain&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: If a character set has been defined for this response (see charset=) then the character set information will also be included in the content type information.
  name: charset
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "Sets the HTTP response's content MIME type. For example, in the controller you could write this:"
  - !ruby/struct:SM::Flow::VERB 
    body: " response.content_type = &quot;text/plain&quot;\n"
  - !ruby/struct:SM::Flow::P 
    body: If a character set has been defined for this response (see charset=) then the character set information will also be included in the content type information.
  name: content_type
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  name: header
  rw: W
- !ruby/object:RI::Attribute 
  comment: 
  name: request
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  name: sending_file
  rw: W
class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: Represents an HTTP response generated by a controller action. One can use an ActionDispatch::Response object to retrieve the current state of the response, or customize the response. An Response object can either represent a &quot;real&quot; HTTP response (i.e. one that is meant to be sent back to the web browser) or a test response (i.e. one that is generated from integration tests). See CgiResponse and TestResponse, respectively.
- !ruby/struct:SM::Flow::P 
  body: Response is mostly a Ruby on Rails framework implement detail, and should never be used directly in controllers. Controllers should use the methods defined in ActionController::Base instead. For example, if you want to set the HTTP response's content MIME type, then use ActionControllerBase#headers instead of Response#headers.
- !ruby/struct:SM::Flow::P 
  body: Nevertheless, integration tests may want to inspect controller responses in more detail, and that's when Response can be useful for application developers. Integration test methods such as ActionDispatch::Integration::Session#get and ActionDispatch::Integration::Session#post return objects of type TestResponse (which are of course also of type Response).
- !ruby/struct:SM::Flow::P 
  body: "For example, the following demo integration &quot;test&quot; prints the body of the controller response to the console:"
- !ruby/struct:SM::Flow::VERB 
  body: " class DemoControllerTest &lt; ActionDispatch::IntegrationTest\n   def test_print_root_path_to_console\n     get('/')\n     puts @response.body\n   end\n end\n"
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: EMPTY
  value: "\" \""
- !ruby/object:RI::Constant 
  comment: 
  name: CONTENT_TYPE
  value: "\"Content-Type\""
full_name: ActionDispatch::Response
includes: 
- !ruby/object:RI::IncludedModule 
  name: Setup
- !ruby/object:RI::IncludedModule 
  name: ActionDispatch::Http::Cache::Response
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: body
- !ruby/object:RI::MethodSummary 
  name: body=
- !ruby/object:RI::MethodSummary 
  name: body_parts
- !ruby/object:RI::MethodSummary 
  name: code
- !ruby/object:RI::MethodSummary 
  name: cookies
- !ruby/object:RI::MethodSummary 
  name: each
- !ruby/object:RI::MethodSummary 
  name: location
- !ruby/object:RI::MethodSummary 
  name: location=
- !ruby/object:RI::MethodSummary 
  name: message
- !ruby/object:RI::MethodSummary 
  name: prepare!
- !ruby/object:RI::MethodSummary 
  name: redirect_url
- !ruby/object:RI::MethodSummary 
  name: respond_to?
- !ruby/object:RI::MethodSummary 
  name: response_code
- !ruby/object:RI::MethodSummary 
  name: status=
- !ruby/object:RI::MethodSummary 
  name: status_message
- !ruby/object:RI::MethodSummary 
  name: to_a
- !ruby/object:RI::MethodSummary 
  name: to_path
- !ruby/object:RI::MethodSummary 
  name: write
name: Response
superclass: Rack::Response
