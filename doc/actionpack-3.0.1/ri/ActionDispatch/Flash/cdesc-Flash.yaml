--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: "The flash provides a way to pass temporary objects between actions. Anything you place in the flash will be exposed to the very next action and then cleared out. This is a great way of doing notices and alerts, such as a create action that sets <tt>flash[:notice] = &quot;Post successfully created&quot;</tt> before redirecting to a display action that can then expose the flash to its template. Actually, that exposure is automatically done. Example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  class PostsController &lt; ActionController::Base\n    def create\n      # save post\n      flash[:notice] = &quot;Post successfully created&quot;\n      redirect_to posts_path(@post)\n    end\n\n    def show\n      # doesn't need to assign the flash notice to the template, that's done automatically\n    end\n  end\n\n  show.html.erb\n    &lt;% if flash[:notice] %&gt;\n      &lt;div class=&quot;notice&quot;&gt;&lt;%= flash[:notice] %&gt;&lt;/div&gt;\n    &lt;% end %&gt;\n"
- !ruby/struct:SM::Flow::P 
  body: "Since the <tt>notice</tt> and <tt>alert</tt> keys are a common idiom, convenience accessors are available:"
- !ruby/struct:SM::Flow::VERB 
  body: "  flash.alert = &quot;You must be logged in&quot;\n  flash.notice = &quot;Post successfully created&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "This example just places a string in the flash, but you can put any object in there. And of course, you can put as many as you like at a time too. Just remember: They'll be gone by the time the next action has been performed."
- !ruby/struct:SM::Flow::P 
  body: See docs on the FlashHash class for more details about the flash.
constants: []

full_name: ActionDispatch::Flash
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: call
name: Flash
superclass: Object
