--- !ruby/object:RI::MethodDescription 
aliases: 
- !ruby/object:RI::AliasName 
  name: t
block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Delegates to I18n#translate but also performs three additional functions. First, it'll catch MissingTranslationData exceptions and turn them into inline spans that contains the missing key, such that you can see in a view what is missing where.
- !ruby/struct:SM::Flow::P 
  body: Second, it'll scope the key by the current partial if the key starts with a period. So if you call <tt>translate(&quot;.foo&quot;)</tt> from the <tt>people/index.html.erb</tt> template, you'll actually be calling <tt>I18n.translate(&quot;people.index.foo&quot;)</tt>. This makes it less repetitive to translate many keys within the same partials and gives you a simple framework for scoping them consistently. If you don't prepend the key with a period, nothing is converted.
- !ruby/struct:SM::Flow::P 
  body: Third, it'll mark the translation as safe HTML if the key has the suffix &quot;_html&quot; or the last element of the key is the word &quot;html&quot;. For example, calling translate(&quot;footer_html&quot;) or translate(&quot;footer.html&quot;) will return a safe HTML string that won't be escaped by other HTML helper methods. This naming convention helps to identify translations that include HTML tags so that you know what kind of output to expect when you call translate in a template.
full_name: ActionView::Helpers::TranslationHelper#translate
is_singleton: false
name: translate
params: (key, options = {})
visibility: public
