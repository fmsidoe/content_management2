--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns the URL for the set of <tt>options</tt> provided. This takes the same options as <tt>url_for</tt> in Action Controller (see the documentation for <tt>ActionController::Base#url_for</tt>). Note that by default <tt>:only_path</tt> is <tt>true</tt> so you'll get the relative &quot;/controller/action&quot; instead of the fully qualified URL like &quot;http://example.com/controller/action&quot;.
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Options
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:anchor</tt> - Specifies the anchor name to be appended to the path.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:only_path</tt> - If true, returns the relative URL (omitting the protocol, host name, and port) (<tt>true</tt> by default unless <tt>:host</tt> is specified).
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:trailing_slash</tt> - If true, adds a trailing slash, as in &quot;/archive/2005/&quot;. Note that this is currently not recommended since it breaks caching.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:host</tt> - Overrides the default (current) host if provided.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:protocol</tt> - Overrides the default (current) protocol if provided.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:user</tt> - Inline HTTP authentication (only plucked out if <tt>:password</tt> is also present).
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: <tt>:password</tt> - Inline HTTP authentication (only plucked out if <tt>:user</tt> is also present).
  type: :BULLET
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Relying on named routes
- !ruby/struct:SM::Flow::P 
  body: If you instead of a hash pass a record (like an Active Record or Active Resource) as the options parameter, you'll trigger the named route for that record. The lookup will happen on the name of the class. So passing a Workshop object will attempt to use the <tt>workshop_path</tt> route. If you have a nested route, such as <tt>admin_workshop_path</tt> you'll have to call that explicitly (it's impossible for <tt>url_for</tt> to guess that route).
- !ruby/struct:SM::Flow::H 
  level: 4
  text: Examples
- !ruby/struct:SM::Flow::VERB 
  body: "  &lt;%= url_for(:action =&gt; 'index') %&gt;\n  # =&gt; /blog/\n\n  &lt;%= url_for(:action =&gt; 'find', :controller =&gt; 'books') %&gt;\n  # =&gt; /books/find\n\n  &lt;%= url_for(:action =&gt; 'login', :controller =&gt; 'members', :only_path =&gt; false, :protocol =&gt; 'https') %&gt;\n  # =&gt; https://www.railsapplication.com/members/login/\n\n  &lt;%= url_for(:action =&gt; 'play', :anchor =&gt; 'player') %&gt;\n  # =&gt; /messages/play/#player\n\n  &lt;%= url_for(:action =&gt; 'jump', :anchor =&gt; 'tax&amp;ship') %&gt;\n  # =&gt; /testing/jump/#tax&amp;ship\n\n  &lt;%= url_for(Workshop.new) %&gt;\n  # relies on Workshop answering a persisted? call (and in this case returning false)\n  # =&gt; /workshops\n\n  &lt;%= url_for(@workshop) %&gt;\n  # calls @workshop.to_s\n  # =&gt; /workshops/5\n\n  &lt;%= url_for(&quot;http://www.example.com&quot;) %&gt;\n  # =&gt; http://www.example.com\n\n  &lt;%= url_for(:back) %&gt;\n  # if request.env[&quot;HTTP_REFERER&quot;] is set to &quot;http://www.example.com&quot;\n  # =&gt; http://www.example.com\n\n  &lt;%= url_for(:back) %&gt;\n  # if request.env[&quot;HTTP_REFERER&quot;] is not set or is blank\n  # =&gt; javascript:history.back()\n"
full_name: ActionView::Helpers::UrlHelper#url_for
is_singleton: false
name: url_for
params: (options = {})
visibility: public
