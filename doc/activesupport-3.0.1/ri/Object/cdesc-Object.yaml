--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: "Most objects are cloneable, but not all. For example you can't dup <tt>nil</tt>:"
- !ruby/struct:SM::Flow::VERB 
  body: "  nil.dup # =&gt; TypeError: can't dup NilClass\n"
- !ruby/struct:SM::Flow::P 
  body: "Classes may signal their instances are not duplicable removing <tt>dup</tt>/<tt>clone</tt> or raising exceptions from them. So, to dup an arbitrary object you normally use an optimistic approach and are ready to catch an exception, say:"
- !ruby/struct:SM::Flow::VERB 
  body: "  arbitrary_object.dup rescue object\n"
- !ruby/struct:SM::Flow::P 
  body: Rails dups objects in a few critical spots where they are not that arbitrary. That rescue is very expensive (like 40 times slower than a predicate), and it is often triggered.
- !ruby/struct:SM::Flow::P 
  body: That's why we hardcode the following cases and check duplicable? instead of using that rescue idiom.
constants: []

full_name: Object
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: acts_like?
- !ruby/object:RI::MethodSummary 
  name: blank?
- !ruby/object:RI::MethodSummary 
  name: duplicable?
- !ruby/object:RI::MethodSummary 
  name: html_safe?
- !ruby/object:RI::MethodSummary 
  name: instance_variable_names
- !ruby/object:RI::MethodSummary 
  name: presence
- !ruby/object:RI::MethodSummary 
  name: present?
- !ruby/object:RI::MethodSummary 
  name: returning
- !ruby/object:RI::MethodSummary 
  name: to_param
- !ruby/object:RI::MethodSummary 
  name: to_query
- !ruby/object:RI::MethodSummary 
  name: try
- !ruby/object:RI::MethodSummary 
  name: with_options
name: Object
superclass: Object
