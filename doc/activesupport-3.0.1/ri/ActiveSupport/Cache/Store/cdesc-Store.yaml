--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  name: options
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  name: silence
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: instrument
- !ruby/object:RI::MethodSummary 
  name: instrument=
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: An abstract cache store class. There are multiple cache store implementations, each having its own additional features. See the classes under the ActiveSupport::Cache module, e.g. ActiveSupport::Cache::MemCacheStore. MemCacheStore is currently the most popular cache store for large production websites.
- !ruby/struct:SM::Flow::P 
  body: Some implementations may not support all methods beyond the basic cache methods of <tt>fetch</tt>, <tt>write</tt>, <tt>read</tt>, +exist?+, and <tt>delete</tt>.
- !ruby/struct:SM::Flow::P 
  body: ActiveSupport::Cache::Store can store any serializable Ruby object.
- !ruby/struct:SM::Flow::VERB 
  body: "  cache = ActiveSupport::Cache::MemoryStore.new\n\n  cache.read(&quot;city&quot;)   # =&gt; nil\n  cache.write(&quot;city&quot;, &quot;Duckburgh&quot;)\n  cache.read(&quot;city&quot;)   # =&gt; &quot;Duckburgh&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: Keys are always translated into Strings and are case sensitive. When an object is specified as a key, its <tt>cache_key</tt> method will be called if it is defined. Otherwise, the <tt>to_param</tt> method will be called. Hashes and Arrays can be used as keys. The elements will be delimited by slashes and Hashes elements will be sorted by key so they are consistent.
- !ruby/struct:SM::Flow::VERB 
  body: "  cache.read(&quot;city&quot;) == cache.read(:city)   # =&gt; true\n"
- !ruby/struct:SM::Flow::P 
  body: Nil values can be cached.
- !ruby/struct:SM::Flow::P 
  body: If your cache is on a shared infrastructure, you can define a namespace for your cache entries. If a namespace is defined, it will be prefixed on to every key. The namespace can be either a static value or a Proc. If it is a Proc, it will be invoked when each key is evaluated so that you can use application logic to invalidate keys.
- !ruby/struct:SM::Flow::VERB 
  body: "  cache.namespace = lambda { @last_mod_time }  # Set the namespace to a variable\n  @last_mod_time = Time.now  # Invalidate the entire cache by changing namespace\n"
- !ruby/struct:SM::Flow::P 
  body: Caches can also store values in a compressed format to save space and reduce time spent sending data. Since there is some overhead, values must be large enough to warrant compression. To turn on compression either pass <tt>:compress =&gt; true</tt> in the initializer or to <tt>fetch</tt> or <tt>write</tt>. To specify the threshold at which to compress values, set <tt>:compress_threshold</tt>. The default threshold is 32K.
constants: []

full_name: ActiveSupport::Cache::Store
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: cleanup
- !ruby/object:RI::MethodSummary 
  name: clear
- !ruby/object:RI::MethodSummary 
  name: decrement
- !ruby/object:RI::MethodSummary 
  name: delete
- !ruby/object:RI::MethodSummary 
  name: delete_matched
- !ruby/object:RI::MethodSummary 
  name: exist?
- !ruby/object:RI::MethodSummary 
  name: fetch
- !ruby/object:RI::MethodSummary 
  name: increment
- !ruby/object:RI::MethodSummary 
  name: key_matcher
- !ruby/object:RI::MethodSummary 
  name: mute
- !ruby/object:RI::MethodSummary 
  name: read
- !ruby/object:RI::MethodSummary 
  name: read_multi
- !ruby/object:RI::MethodSummary 
  name: silence!
- !ruby/object:RI::MethodSummary 
  name: write
name: Store
superclass: Object
